{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api/api.ts","components/Loader/Loader.tsx","components/ErrorMessage/ErrorMessage.tsx","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","props","movie","className","src","Poster","alt","Title","Plot","MoviesList","movies","map","imdbID","API_DATA_URL","API_KEY","getData","title","a","fetch","response","json","Loader","ErrorMessage","errorMessage","FindMovie","addMovie","listMovies","useState","inputValue","setInputValue","setMovie","isLoading","setIsloading","isInputEntered","setIsInputEntered","isMovieLoaded","setIsMovieLoaded","isMovieOnList","setIsMovieOnList","uploadError","setUploadError","length","trim","toLowerCase","movieFromServer","setTimeout","htmlFor","type","id","placeholder","cn","value","onChange","event","target","onClick","some","listMovie","App","setMovies","newMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.40923755.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie | null;\n};\n\nexport const MovieCard: React.FC<Props> = (props) => {\n  const { movie } = props;\n\n  return (\n    <>\n      {movie && (\n        <div className=\"card\">\n          <div className=\"card-image\">\n            <figure className=\"image is-4by3\">\n              <img\n                src={movie.Poster}\n                alt=\"Film logo\"\n              />\n            </figure>\n          </div>\n          <div className=\"card-content\">\n            <div className=\"media\">\n              <div className=\"media-left\">\n                <figure className=\"image is-48x48\">\n                  <img\n                    src=\"images/imdb-logo.jpeg\"\n                    alt=\"imdb\"\n                  />\n                </figure>\n              </div>\n              <div className=\"media-content\">\n                <p className=\"title is-8\">{movie.Title}</p>\n              </div>\n            </div>\n\n            <div className=\"content\">\n              {movie.Plot}\n              <br />\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = (props) => {\n  const { movies } = props;\n\n  return (\n    <div className=\"movies\">\n      {movies.map(movie => (\n        <MovieCard\n          key={movie.imdbID}\n          movie={movie}\n        />\n      ))}\n    </div>\n  );\n};\n","const API_DATA_URL = 'https://www.omdbapi.com';\nconst API_KEY = '26d463cc';\n\nexport async function getData(title: string): Promise<Movie> {\n  const response = await fetch(`${API_DATA_URL}/?apikey=${API_KEY}&t=${title}`);\n\n  return response.json();\n}\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"lds-spinner\">\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n  </div>\n);\n","import React from 'react';\nimport './ErrorMessage.scss';\n\ntype Props = {\n  errorMessage: string,\n};\n\nexport const ErrorMessage: React.FC<Props> = ({ errorMessage }) => {\n  return (\n    <div className=\"error\">\n      <h2 className=\"error__message\">{errorMessage}</h2>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './FindMovie.scss';\n\nimport cn from 'classnames';\nimport { getData } from '../../api';\nimport { MovieCard } from '../MovieCard';\nimport { Loader } from '../Loader';\nimport { ErrorMessage } from '../ErrorMessage';\n\ntype Props = {\n  listMovies: Movie[],\n  addMovie: (movie: Movie) => void,\n};\n\nexport const FindMovie: React.FC<Props> = ({ addMovie, listMovies }) => {\n  const [inputValue, setInputValue] = useState('');\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [isLoading, setIsloading] = useState(false);\n  const [isInputEntered, setIsInputEntered] = useState(true);\n  const [isMovieLoaded, setIsMovieLoaded] = useState(true);\n  const [isMovieOnList, setIsMovieOnList] = useState(false);\n  const [uploadError, setUploadError] = useState(false);\n\n  function changeInput(event: React.ChangeEvent<HTMLInputElement>) {\n    setInputValue(event.target.value);\n    setIsInputEntered(true);\n    setIsMovieLoaded(true);\n    setUploadError(false);\n  }\n\n  function checkMovieOnList() {\n    if (movie) {\n      return listMovies\n        .some(listMovie => listMovie.imdbID === movie.imdbID);\n    }\n\n    return false;\n  }\n\n  async function getMovieFromServer() {\n    setMovie(null);\n    setIsMovieOnList(false);\n    setIsMovieLoaded(true);\n    setUploadError(false);\n\n    if (!inputValue.length) {\n      setIsInputEntered(false);\n\n      return;\n    }\n\n    setIsloading(true);\n\n    try {\n      const movieFromServer = await getData(inputValue.trim().toLowerCase());\n\n      if (movieFromServer.Title) {\n        setMovie(movieFromServer);\n        setIsMovieLoaded(true);\n      } else {\n        setTimeout(() => {\n          setIsMovieLoaded(false);\n        }, 510);\n      }\n    } finally {\n      setTimeout(() => {\n        setIsloading(false);\n      }, 500);\n    }\n  }\n\n  function throwMovie() {\n    setIsInputEntered(true);\n    setIsMovieLoaded(true);\n\n    if (movie) {\n      if (!checkMovieOnList()) {\n        setInputValue('');\n        addMovie(movie);\n      } else {\n        setIsMovieOnList(true);\n      }\n    } else {\n      setUploadError(true);\n    }\n\n    setMovie(null);\n  }\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n            <div className=\"control\">\n              <input\n                type=\"text\"\n                id=\"movie-title\"\n                placeholder=\"Enter a title to search\"\n                className={cn(\n                  'input',\n                  { 'is-danger': !isMovieLoaded || !isInputEntered || uploadError },\n                )}\n                value={inputValue}\n                onChange={changeInput}\n              />\n            </div>\n          </label>\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={getMovieFromServer}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-primary\"\n              onClick={throwMovie}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      <div className=\"errors-container\">\n        {isInputEntered\n          ? (\n            <div>\n              {isMovieOnList && !uploadError && (\n                <div>\n                  <ErrorMessage errorMessage=\"The movie is already on the list\" />\n                </div>\n              )}\n            </div>\n          )\n          : (\n            <div>\n              <ErrorMessage errorMessage=\"Please input a title!\" />\n            </div>\n          )}\n        {!isMovieLoaded && (\n          <div>\n            <ErrorMessage errorMessage=\"Oops... Can't find a movie with such a title\" />\n          </div>\n        )}\n        {uploadError && (\n          <div>\n            <ErrorMessage errorMessage=\"The movie is not loaded\" />\n          </div>\n        )}\n      </div>\n\n      {isLoading\n        ? (\n          <div className=\"loader__container\">\n            <Loader />\n          </div>\n        )\n        : (\n          <>\n            {movie !== null && (\n              <div className=\"container\">\n                <h2 className=\"title\">Preview</h2>\n                <MovieCard movie={movie} />\n              </div>\n            )}\n          </>\n        )}\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\n\nexport const App: React.FC = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const addMovie = (newMovie: Movie) => {\n    setMovies([...movies, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie addMovie={addMovie} listMovies={movies} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}